<?xml version="1.0" encoding="UTF-8"?>
<?jelly escape-by-default='true'?>
<div>
    <p>
        <a href="https://github.com/gdemengin/pipeline-whitelist">pipeline-whitelist</a> a library to expose useful functions (blacklisted by default in jenkins) which should be whitelisted IMHO (In My Humble Opinion)
    </p>
    <p>
        <b>Instance and plugins versions</b>
    </p>
    <dl>
        <dt><code>String version()</code></dt>
        <dd>
            <p>
                get instance version
            <p>
        </dd>
        <dt><code>List<java.util.LinkedHashMap> plugins()</code></dt>
        <dd>
            <p>
                get list dictionaries with plugins name and version<br>
                format: <code>[ [ displayName: name, shortName: name, version: v ]* ]</code>
            <p>
        </dd>
    </dl>
    <p>
        <b>String manipulation</b>
    </p>
    <dl>
        <dt><code>String multiply(String lhs, Integer rhs)</code></dt>
        <dd>
            <p>
                <code>return lhs*rhs</code>
            <p>
        </dd>
        <dt><code>String escapeHtml4(String input)</code></dt>
        <dd>
            <p>
                <code>return org.apache.commons.lang3.StringEscapeUtils.escapeHtml4(input)</code>
            <p>
        </dd>
    </dl>
    <p>
        <b>Metadata access</b>
    </p>
    <dl>
        <dt><code>StackTraceElement[] getStackTrace(Throwable e)</code></dt>
        <dd>
            <p>
                get sanitized list of StackTraceElement for exception
            <p>
        </dd>
        <dt><code>StackTraceElement[] getCurrentStackTrace()</code></dt>
        <dd>
            <p>
                get sanitized list of StackTraceElement for current location
            <p>
        </dd>
        <dt>
            <code>String getMethodName(StackTraceElement element)</code><br>
            <code>String getClassName(StackTraceElement element)</code><br>
            <code>String getFileName(StackTraceElement element)</code><br>
            <code>Integer getLineNumber(StackTraceElement element)</code>
        </dt>
        <dd>
            <p>
                get info from StackTraceElement
            </p>
        </dd>
        <dt><code>Class getSuperclass(Class c)</code></dt>
        <dd>
            <p>
                get superclass
            </p>
        </dd>
        <dt><code>Throwable[] getSuppressed(Throwable e)</code></dt>
        <dd>
            <p>
                get suppressed exceptions
            </p>
        </dd>
        <dt><code>StackTraceElement[] filterStackTrace(StackTraceElement[] st)</code></dt>
        <dd>
            <p>
                filter stackTrace to keep only the ones coming from user's scripts (WorkflowScript and ScriptN.groovy)<br>
                to provide a more comprehensive list of stackTraceElements with only user's code<br>
                (convenient when tracking the origin of an exception for example)<br>
                <br>
                example:<br>
                &nbsp;&nbsp;- <b>before</b> java.lang.NoSuchMethodError stacktrace<br>
                <code>
                &nbsp;&nbsp;&nbsp;&nbsp;org.jenkinsci.plugins.workflow.cps.DSL.invokeMethod(DSL.java:202)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.jenkinsci.plugins.workflow.cps.CpsScript.invokeMethod(CpsScript.java:122)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.kohsuke.groovy.sandbox.impl.Checker$1.call(Checker.java:160)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.kohsuke.groovy.sandbox.GroovyInterceptor.onMethodCall(GroovyInterceptor.java:23)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SandboxInterceptor.onMethodCall(SandboxInterceptor.java:157)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SandboxInterceptor.onMethodCall(SandboxInterceptor.java:142)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.kohsuke.groovy.sandbox.impl.Checker$1.call(Checker.java:158)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.kohsuke.groovy.sandbox.impl.Checker.checkedCall(Checker.java:162)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;com.cloudbees.groovy.cps.sandbox.SandboxInvoker.methodCall(SandboxInvoker.java:17)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;WorkflowScript.testMetaDataAccess(WorkflowScript:189)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;WorkflowScript.run(WorkflowScript:439)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;___cps.transform___(Native Method)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;com.cloudbees.groovy.cps.impl.ContinuationGroup.methodCall(ContinuationGroup.java:86)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;com.cloudbees.groovy.cps.impl.FunctionCallBlock$ContinuationImpl.dispatchOrArg(FunctionCallBlock.java:113)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;com.cloudbees.groovy.cps.impl.FunctionCallBlock$ContinuationImpl.fixName(FunctionCallBlock.java:78)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;com.cloudbees.groovy.cps.impl.ContinuationPtr$ContinuationImpl.receive(ContinuationPtr.java:72)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;com.cloudbees.groovy.cps.impl.ConstantBlock.eval(ConstantBlock.java:21)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;com.cloudbees.groovy.cps.Next.step(Next.java:83)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;com.cloudbees.groovy.cps.Continuable$1.call(Continuable.java:174)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;com.cloudbees.groovy.cps.Continuable$1.call(Continuable.java:163)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;com.cloudbees.groovy.cps.Continuable.run0(Continuable.java:163)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.jenkinsci.plugins.workflow.cps.SandboxContinuable.access$001(SandboxContinuable.java:18)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.jenkinsci.plugins.workflow.cps.SandboxContinuable.run0(SandboxContinuable.java:51)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.jenkinsci.plugins.workflow.cps.CpsThread.runNextChunk(CpsThread.java:185)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.jenkinsci.plugins.workflow.cps.CpsThreadGroup.run(CpsThreadGroup.java:405)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.jenkinsci.plugins.workflow.cps.CpsThreadGroup.access$400(CpsThreadGroup.java:96)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.jenkinsci.plugins.workflow.cps.CpsThreadGroup$2.call(CpsThreadGroup.java:317)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.jenkinsci.plugins.workflow.cps.CpsThreadGroup$2.call(CpsThreadGroup.java:281)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;org.jenkinsci.plugins.workflow.cps.CpsVmExecutorService$2.call(CpsVmExecutorService.java:67)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;hudson.remoting.SingleLaneExecutorService$1.run(SingleLaneExecutorService.java:131)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;jenkins.util.ContextResettingExecutorService$1.run(ContextResettingExecutorService.java:28)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;jenkins.security.ImpersonatingExecutorService$1.run(ImpersonatingExecutorService.java:59)<br>
                </code>
                &nbsp;&nbsp;- <b>after</b> java.lang.NoSuchMethodError filtered stacktrace<br>
                <code>
                &nbsp;&nbsp;&nbsp;&nbsp;WorkflowScript.testMetaDataAccess(WorkflowScript:189)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;WorkflowScript.run(WorkflowScript:439)<br>
                </code>
            </p>
        </dd>
        <dt><code>void addTraceableStackTrace(Throwable e)</code></dt>
        <dd>
            <p>
                if exception does not contain any stackTrace with user's script in it (i.e. filterStackTrace return is empty)<br>
                append it with a "suppressed" exception with the current stackTrace<br>
                (as suppressed exceptions can be used to help find the root cause of the exception)<br>
                <br>
                NB: some Errors (for example "assert") do not show any stackTrace for the statement in the user's code<br>
                <br>
                example:<br>
                <code>
                try {<br>
                &nbsp;&nbsp;&nbsp;&nbsp;assert 1 == 0<br>
                } catch(Error e) {<br>
                &nbsp;&nbsp;&nbsp;&nbsp;whitelist.addTraceableStackTrace(e)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;throw e<br>
                }<br>
                </code>
                <br>
                result shows "WorkflowScript.run(WorkflowScript:5)" :<br>
                <code>
                &nbsp;&nbsp;[Pipeline] Start of Pipeline<br>
                &nbsp;&nbsp;[Pipeline] End of Pipeline<br>
                &nbsp;&nbsp;<b>Also: hudson.remoting.ProxyException: java.lang.Exception: workarround to show user stackTrace</b><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>at WorkflowScript.run(WorkflowScript:5)</b><br>
                &nbsp;&nbsp;hudson.remoting.ProxyException: Assertion failed:<br>
                <br>
                &nbsp;&nbsp;assert 1 == 0<br>
                <br>
                &nbsp;&nbsp;&nbsp;&nbsp;at com.cloudbees.groovy.cps.impl.AssertBlock$ContinuationImpl.fail(AssertBlock.java:47)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at com.cloudbees.groovy.cps.impl.ContinuationPtr$ContinuationImpl.receive(ContinuationPtr.java:72)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at com.cloudbees.groovy.cps.impl.ConstantBlock.eval(ConstantBlock.java:21)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at com.cloudbees.groovy.cps.Next.step(Next.java:83)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at com.cloudbees.groovy.cps.Continuable$1.call(Continuable.java:174)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at com.cloudbees.groovy.cps.Continuable$1.call(Continuable.java:163)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at com.cloudbees.groovy.cps.Continuable.run0(Continuable.java:163)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at org.jenkinsci.plugins.workflow.cps.SandboxContinuable.access$001(SandboxContinuable.java:18)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at org.jenkinsci.plugins.workflow.cps.SandboxContinuable.run0(SandboxContinuable.java:51)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at org.jenkinsci.plugins.workflow.cps.CpsThread.runNextChunk(CpsThread.java:185)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at org.jenkinsci.plugins.workflow.cps.CpsThreadGroup.run(CpsThreadGroup.java:405)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at org.jenkinsci.plugins.workflow.cps.CpsThreadGroup.access$400(CpsThreadGroup.java:96)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at org.jenkinsci.plugins.workflow.cps.CpsThreadGroup$2.call(CpsThreadGroup.java:317)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at org.jenkinsci.plugins.workflow.cps.CpsThreadGroup$2.call(CpsThreadGroup.java:281)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at org.jenkinsci.plugins.workflow.cps.CpsVmExecutorService$2.call(CpsVmExecutorService.java:67)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at hudson.remoting.SingleLaneExecutorService$1.run(SingleLaneExecutorService.java:131)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at jenkins.util.ContextResettingExecutorService$1.run(ContextResettingExecutorService.java:28)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;at jenkins.security.ImpersonatingExecutorService$1.run(ImpersonatingExecutorService.java:59)<br>
                &nbsp;&nbsp;Finished: FAILURE<br>
                </code>
            </p>
        </dd>
    </dl>
    <p>
        <b>Access to Jenkins logs</b>
    </p>
    <dl>
        <dt><code>String getRawBuildLog(RunWrapper build = currentBuild)</code></dt>
        <dd>
            <p>
                get raw log from current build
            <p>
        </dd>
        <dt><code>java.util.LinkedHashMap getRawMatrixRunsLog(RunWrapper build)</code></dt>
        <dd>
            <p>
                get raw log from matrix build<br>
                format: <code>[ &lt;axisId&gt;:log ]</code><br>
                shall fail if build is not the runWrapper of a matrix build
            <p>
        </dd>
    </dl>
    <p>
        <b>Jobs and Builds</b><br>
        provide access to jobs and builds and allow to read (READ ONLY) some of their content
        regardless of the right to see the content of the jobs and builds<br>
        (might be considered a security breach)
    </p>
    <dl>
        <dt><code>java.util.LinkedHashMap getJobs()</code></dt>
        <dd>
            <p>
                get map with all jobs from the instance (including jobs from multi-branch projects)<br>
                format: <code>[ &lt;job fullname&gt;: hudson.model.Job job ]</code>
            <p>
        </dd>
        <dt><code>java.util.LinkedHashMap getMatrixConfiguration(hudson.matrix.MatrixProject job)</code></dt>
        <dd>
            <p>
                get map of the configuration of the matrix
                format <code>[ &lt;axis fullname&gt;: hudson.matrix.MatrixConfiguration configuration ]</code>
            <p>
        </dd>
        <dt><code>hudson.model.Job getJobByName(String name)</code></dt>
        <dd>
            <p>
                get job by name (fullName)
            <p>
        </dd>
        <dt><code>List&lt;Integer&gt; getRunIds(hudson.model.Job job)</code></dt>
        <dd>
            <p>
                get list of runs for a job
            <p>
        </dd>
        <dt>
            <code>RunWrapper getRunWrapper(hudson.model.Job job, Integer runId)</code>
            <code>RunWrapper getRunWrapper(hudson.model.Job job, String runId)</code>
            <code>RunWrapper getLastRunWrapper(hudson.model.Job job)</code>
            <code>RunWrapper getLastStableRunWrapper(hudson.model.Job job)</code>
        </dt>
        <dd>
            <p>
                access RunWrapper from job
            <p>
        </dd>
        <dt><code>void archiveStringArtifact(String name, String buffer)</code></dt>
        <dd>
            <p>
                archive buffer in current run artifacts without instantiating a node (alternative to archiveArtifacts when not already on a node())
            <p>
        </dd>
        <dt><code>String unArchiveStringArtifact(String name, RunWrapper build = currentBuild)</code></dt>
        <dd>
            <p>
                unarchive buffer from build without instantiating a node (alternative to copyArtifacts when not already on a node())
            <p>
        </dd>
        <dt><code>String getJobConfig(RunWrapper build = currentBuild)</code></dt>
        <dd>
            <p>
                get job XML configuration
            <p>
        </dd>
        <dt><code>java.util.LinkedHashMap getBuildPipelineScripts(RunWrapper build = currentBuild)</code></dt>
        <dd>
            <p>
                get a map with pipeline scripts<br>
                format: <code>[ script: mainScript, loadedScripts: [ Script1: loadedScript1, Script2: loadedScript2, ... ]</code>
            <p>
        </dd>
        <dt><code>List&lt;String&gt; getBuildStartupCauses()</code></dt>
        <dd>
            <p>
                startup causes<br>
                <b>OBSOLETE</b> (kept for compatibility): with newer versions of jenkins use RunWrapper.getBuildCauses.collect{ it.getShortDescription() }
            <p>
        </dd>
        <dt>
            <code>Boolean isJobStartedByScm()</code><br>
            <code>Boolean isJobStartedManually()</code><br>
            <code>Boolean isJobStartedByTimer()</code>
        </dt>
        <dd>
            <p>
                tests who started the job<br>
                <b>OBSOLETE</b> (kept for compatibility): with newer versions of jenkins:<br>
                - for <code>isJobStartedByScm()</code> use <code>RunWrapper.getBuildCauses('hudson.triggers.SCMTrigger$SCMTriggerCause') != null || RunWrapper.getBuildCauses('jenkins.branch.BranchIndexingCause') != null</code><br>
                - for <code>isJobStartedManually()</code> use <code>RunWrapper.getBuildCauses('hudson.model.Cause$UserIdCause') != null</code><br>
                - for <code>isJobStartedByTimer()</code> use <code>RunWrapper.getBuildCauses('hudson.triggers.TimerTrigger$TimerTriggerCause') != null</code>
            <p>
        </dd>
    </dl>
    <p>
        <b>Node and Labels</b>
    </p>
    <dl>
        <dt><code>List&lt;java.util.LinkedHashMap&gt; getNodes(String label = null)</code></dt>
        <dd>
            <p>
                if label is set get all nodes from this label (empty list if label does not exist)<br>
                label can be a combinations of labels (example <code>getNodes('linux-centos-5.5 || windows7')</code>)<br>
                returns list properties of the internal node object:
                <ul>
                    <li><code>name</code></li>
                    <li><code>class</code></li>
                    <li><code>selfLabel</code></li>
                    <li><code>assignedLabels</code></li>
                    <li><code>java.util.LinkedHashMap computer</code>
                        <ul>
                            <li><code>numExecutors</code></li>
                            <li><code>countBusy</code></li>
                            <li><code>offline</code></li>
                            <li><code>temporarilyOffline</code></li>
                            <li><code>offlineCause</code></li>
                        </ul>
                    </li>
                </ul>
            <p>
        </dd>
        <dt>
            <code>Boolean isMaster(node)</code><br>
            <code>Boolean isDumbSlave(node)</code><br>
            <code>Boolean isDockerTransientNode(node)</code>
        </dt>
        <dd>
            <p>
                node type (using getNodes result or native node object)
            <p>
        </dd>
        <dt><code>List&lt;java.util.LinkedHashMap&gt; getLabels()</code></dt>
        <dd>
            <p>
                get all labels on the instance<br>
                returns list properties of the internal label objects:
                <ul>
                    <li><code>name</code></li>
                    <li><code>List&lt;java.util.LinkedHashMap&gt; clouds</code> : list of clouds (docker label definition)
                        <ul>
                            <li><code>containerCap</code> : max number of containers of this label</li>
                            <li><code>List&lt;java.util.LinkedHashMap&gt; templates</code> : list of definitions of cloud on this instance (could be more than 1)
                                <ul>
                                    <li><code>labelString</code></li>
                                    <li><code>image</code></li>
                                    <li><code>instanceCap</code> : max number of containers on instance</li>
                                </ul>
                            </li>
                        </ul>
                    </li>
                </ul>
            </p>
        </dd>
    </dl>
    <p>
        <b>NotBlockingSemaphore</b> an implementation of a semaphore for parallel statements
    </p>
    <dl>
        <dt>
            <code>class NotBlockingSemaphore extends Semaphore</code><br>
            <code>NotBlockingSemaphore semaphore(Integer limit, Integer timeout = 50)</code><br>
            <code>void setSemaphoreTimeout(NotBlockingSemaphore sem, Integer timeout)</code><br>
            <code>void acquireSemaphore(NotBlockingSemaphore sem)</code><br>
            <code>void releaseSemaphore(NotBlockingSemaphore sem)</code>
        </dt>
        <dd>
            <p>
                instantiate, acquire and release semaphore<br>
                since the Virtual Machine is mono-threaded the wait is not blocking (with sleep between attempts to let other branches work)<br>
                to do that efficiently we use a timeout in milliseconds (default 50)<br>
                if less than 10 parallel branches the timeout of 50ms seems to be a good trade-off<br>
                with more than 10 branches, it is starting to slow everything down: reduce the timeout to 0ms or 1ms
                (0ms is not that bad as long as there are enough branches: the Virtual Machine is cycling through the branches to find the ones which are available for work)<br>
                more info:<br>
                - https://stackoverflow.com/questions/44255708/jenkins-pipeline-and-semaphores<br>
                - https://issues.jenkins-ci.org/browse/JENKINS-44545<br>
                - https://issues.jenkins-ci.org/browse/JENKINS-44085<br>
                <br>
                example:<br>
                <code>
                &nbsp;&nbsp;&nbsp;&nbsp;def s = whitelist.semaphore(1)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;parallel b1: {<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;whitelist.acquireSemaphore(s)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>// do some atomic work</b><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;whitelist.releaseSemaphore(s)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;}, b2: {<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;whitelist.acquireSemaphore(s)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>// do some atomic work</b><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;whitelist.releaseSemaphore(s)<br>
                &nbsp;&nbsp;&nbsp;&nbsp;}, failFast: true<br>
                </code>
            <p>
        </dd>
    </dl>
</div>
